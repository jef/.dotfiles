# antibody 
zshupdate() {
    antibody bundle < "$HOME/.zsh/plugins.txt" >! "$HOME/.zsh/plugins"
}

# github 
_git_fetch_pull_prune() {
    git fetch --all --prune --tags --force
    git branch --verbose | grep "\[gone\]" | awk '{print $1}' | xargs git branch --delete --force
    git pull
}

_git_push_set_upstream_current_branch() {
    git push --set-upstream origin "$(git rev-parse --abbrev-ref HEAD)" "$@"
}

_git_sync_fork() {
    _git_fetch_pull_prune
    git merge upstream/master
}

trigger() {
    branch_name="jef/trigger"
    commit_message="chore: trigger deployment (${1})"
    pr_assignee="jef"
    pr_body="### Description

Triggers deployment based on (${1})"
    pr_label=""
    pr_title="chore: trigger deployment"

    echo "checking out master and pruning local"

    git checkout master > /dev/null 2>&1
    _git_fetch_pull_prune > /dev/null 2>&1

    git branch --delete --force "$branch_name" > /dev/null 2>&1
    git push origin --delete "$branch_name" > /dev/null 2>&1
    git checkout -b "$branch_name" > /dev/null 2>&1

    echo "creating commit and pr"

    git commit --allow-empty \
        --message "$commit_message" \
        --no-verify > /dev/null 2>&1
    git push --set-upstream origin "$(git-branch-current 2> /dev/null)" --no-verify > /dev/null 2>&1

    gh pr create \
        --assignee "$pr_assignee" \
        --title "$pr_title" \
        --body "$pr_body" \
        --label "$pr_label" > /dev/null 2>&1
    gh pr view

    git checkout master
}

# kubectl
klog() {
    [[ -n "$3" ]] && stern --namespace "$1" --tail=1 --output raw "$2" | jq --raw-output "\"\\u001b[30m[\\u001b[36m\\(.level)\\u001b[30m] \\u001b[35m\\($3) \\u001b[30m::\\u001b[0m \\(.message)\""
    [[ -z "$3" ]] && stern --namespace "$1" --tail=1 --output raw "$2" | jq --raw-output "\"\\u001b[30m[\\u001b[36m\\(.level)\\u001b[30m] \\u001b[30m::\\u001b[0m \\(.message)\""
}

# system
print_unicode() {
    echo "↘ ↗ ✖ ✔ ℹ"
}
